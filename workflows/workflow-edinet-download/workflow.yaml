main:
  params: [args]
  steps:
    - init:
        assign:
        - project: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
        - bucket: ${sys.get_env("BUCKET")}
        - api_key: ${sys.get_env("EDINET_API_KEY")}
        - extractedDocIds: []
    - check_date:
        switch:
          - condition: ${args.date == null}
            assign:
              - date: ${text.split(time.format(sys.now(), "Asia/Tokyo"), "T")[0]}
          - condition: ${true}
            assign:
              - date: ${args.date}

    - build_api_url:
        assign:
          - api_url: ${"https://api.edinet-fsa.go.jp/api/v2/documents.json?date=" + date + "&type=2&Subscription-Key=" + api_key}

    - get_data_from_edinet:
        call: http.get
        args:
          url: ${api_url}
        result: api_response

    - save_to_cloud_storage:
        call: googleapis.storage.v1.objects.insert
        args:
            bucket: ${bucket}
            uploadType: "media"
            name: ${"doc_json/" + date + "/edinet_data_" + sys.now() + ".json"}
            body: ${api_response.body}
        result: save_result

    - get_annual_securities_report_doc_id:
        for:
          value: item
          in: ${api_response.body.results}
          steps:
            - check_dockTypeCode:
                switch:
                  - condition: ${item.docTypeCode == "120"} # 有価証券報告書のコード
                    steps:
                      - extract_docId:
                          assign:
                            - docId: ${item.docID}
                      - add_to_list:
                          assign:
                            - extractedDocIds:  ${list.concat(extractedDocIds, docId)}
                      - write_extract_success_log:
                          call: sys.log
                          args:
                              text: ${"extract success. docId:" + item.docID + " raw_json:" + json.encode_to_string(item) }
                              severity: "INFO" 

    - download_annual_securities_report_zip:
        for:
          value: docId
          in: ${extractedDocIds}
          steps:
            - build_url:
                assign:
                  - api_url: ${"https://api.edinet-fsa.go.jp/api/v2/documents/" + docId + "?type=5&Subscription-Key=" + api_key}
            - write_download_start_log:
                call: sys.log
                args:
                  text: ${"download start:" + docId + "url" + api_url}
                  severity: "INFO" 
            - download_zip:
                call: http.get
                args:
                  url: ${api_url}
                result: api_response
            - get_status_code_from_body:
                try:
                  assign:
                    # statusコードはbodyに入っているので取得するが、成功時はバイナリが返ってくるので取得できないのでTRY-CATCHで対処する
                    - status_code: ${api_response.body.metadata.status}
                except:
                  as: e
                  assign:
                    - status_code: "200"                  
            - when_status_code_is_error:
                switch:
                  - condition: ${status_code != "200"}
                    call: sys.log
                    args:
                      text: ${"download docId:" + docId + " status:" + status_code}
                      severity: "WARNING"
                    next: wait # skip download
            - save_zip_to_cloud_storage:
                call: googleapis.storage.v1.objects.insert
                args:
                    bucket: ${bucket}
                    uploadType: "media"
                    name: ${"csv_zip/" + date + "/" + docId + ".zip"}
                    body: ${api_response.body}
                result: save_result
            - write_download_success_log:
                call: sys.log
                args:
                  text: ${"download success:" + docId}
                  severity: "INFO" 
            - wait:
                # 待機
                call: sys.sleep
                args:
                    seconds: 60 # 1 minutes

    - return_value:
        return: ${extractedDocIds}

                